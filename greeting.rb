#def greeting
#  'Hello'
#end

#puts greeting

#メソッドを定義するには、実行する処理内容をdef ～ end 内に記述
#メソッドを呼び出すには、そのメソッド名(今回は「greeting」)を記述

#プログラムは、上から下に順番に処理　このため、自分で定義したメソッドを使うには、定義の後に呼び出す必要がある
#メソッドは呼び出されない限り、処理が実行されない


#puts greeting　#//先にgreetingを呼び出している

#def greeting
#  'help'
#end
#こちらのみだとエラー発生
#出力されるものがあれば二つ目の「puts greeting」のみ読み込まれ一つ目の「'Hello'」が出力　２行の「Hello」が出力されるということ

#引数　戻り値
def greeting(name)
  return "Hello, #{name}!"#"Hello, #{name}!"で実行可　#戻り値は、returnを使って明示的に指定することもできる　returnを省略した場合は、「最終結果」が戻り値になる
  "Good morning, #{name}!" # この行のnameは、引数で渡すname 　#この行が戻り値
end

puts greeting('John')  # 'John'を引数として渡す

#「引数」は、メソッドを呼び出す際、メソッドに渡す値のこと
#通常、メソッド名(引数) の形で記述しますが、先ほどのgreeting.rbのように引数は省略も可能

#「戻り値（返り値）」は、メソッドが呼ばれたときに返ってくる値のこと
#def ～ end 処理内の最終結果が戻り値
#引数の値は、メソッドを定義した側で好きな変数名をつけられる。

#「return」の使用場面
#def calc(num)
#  return "計算できません" if num.zero?

  # 複雑な計算処理
#end
#numは引数で受け取る値なので、引数に渡る数値が0の場合はreturnによって"計算できません"が返る。そして、それ以降の複雑な計算処理は行われない
#上記重要
#returnを実行すると、そこでメソッドを終了するため、上記のように数値が0である場合には、早々にメソッドを終了したい場合などに有効
#一つ一つの処理をコンパクトに収めるために、あえてreturnを細かく記述することもある